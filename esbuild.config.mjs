import builtins from "builtin-modules";
import esbuild from "esbuild";
import fs from "fs/promises";
import path from "path";
import process from "process";

const banner = `
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

async function getPackageName() {
  const packageJsonPath = path.resolve(process.cwd(), "package.json");
  const packageJson = JSON.parse(await fs.readFile(packageJsonPath, "utf8"));
  return packageJson.name;
}

async function copyFilesToBuildDir(buildDir, files) {
  for (const file of files) {
    const sourcePath = path.resolve(process.cwd(), file);
    const destinationPath = path.join(buildDir, file);

    try {
      await fs.copyFile(sourcePath, destinationPath);
      console.log(`Arquivo copiado: ${file}`);
    } catch (err) {
      console.warn(`Erro ao copiar ${file}:`, err.message);
    }
  }
}

async function main() {
  const packageName = await getPackageName();
  const buildDir = path.resolve(process.cwd(), "build", packageName);

  // Criar o diretório de saída, se não existir
  await fs.mkdir(buildDir, { recursive: true });

  const context = await esbuild.context({
    banner: {
      js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      ...builtins,
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: path.join(buildDir, "main.js"), // Saída configurada
    minify: prod,
  });

  if (prod) {
    await context.rebuild();

    // Copiar arquivos adicionais para a pasta de build
    const filesToCopy = ["manifest.json", "README.md", "LICENSE", "styles.css"];
    await copyFilesToBuildDir(buildDir, filesToCopy);

    console.log(`Build concluído em: ${buildDir}`);
    process.exit(0);
  } else {
    await context.watch();
    console.log(`Modo desenvolvimento ativo. Arquivos sendo gerados em: ${buildDir}`);
  }
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
